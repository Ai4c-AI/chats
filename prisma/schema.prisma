// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String        @id @default(uuid())
  avatar       String?
  account      String?       @unique
  username     String?
  password     String
  email        String?       @unique
  phone        String?       @unique
  role         String        @default("-")
  enabled      Boolean       @default(true)
  provider     String?
  sub          String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sessions     Sessions[]
  messages     Messages[]
  userBalances UserBalances?
  UserModels   UserModels[]
  AuditLogs    RequestLogs[]
  Orders       Orders[]
}

model FileServices {
  id        String   @id @default(uuid())
  name      String   @unique
  enabled   Boolean  @default(true)
  type      String
  configs   String   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatModels {
  id           String     @id @default(uuid())
  modelVersion String
  name         String
  type         String
  rank         Int?
  remarks      String?
  fileServerId String?
  fileConfig   String?
  apiConfig    String     @default("{}")
  modelConfig  String     @default("{}")
  priceConfig  String     @default("{}")
  enabled      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  messages     Messages[]
}

model Sessions {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserModels {
  id        String   @id @default(uuid())
  userId    String
  models    String   @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model Messages {
  id          String     @id @default(uuid())
  userId      String
  chatModelId String
  name        String
  prompt      String?
  messages    String     @default("[]")
  tokenCount  Int        @default(0)
  chatCount   Int        @default(0)
  totalPrice  Decimal    @default(0)
  isDeleted   Boolean?   @default(false)
  isShared    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        Users      @relation(fields: [userId], references: [id])
  chatModel   ChatModels @relation(fields: [chatModelId], references: [id])
}

model UserBalances {
  id        String   @id @default(uuid())
  balance   Decimal  @default(0)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model BalanceLogs {
  id           String   @id @default(uuid())
  userId       String
  createUserId String
  value        Decimal  @default(0)
  type         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Orders {
  id           String   @id @default(uuid())
  createUserId String
  amount       Int
  outTradeNo   String
  status       String
  payH5Url     String?
  prepayId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         Users    @relation(fields: [createUserId], references: [id])
}

model Counterfoils {
  id        String   @id @default(uuid())
  orderId   String
  info      String
  createdAt DateTime @default(now())
}

model LoginServices {
  id        String   @id @default(uuid())
  type      String
  configs   String   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSms {
  id        String   @id @default(uuid())
  type      String
  status    String
  code      String
  createdAt DateTime @default(now())
}

model PayServices {
  id        String   @id @default(uuid())
  type      String
  configs   String   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestLogs {
  id           String   @id @default(uuid())
  ip           String?
  userId       String?
  url          String
  method       String
  statusCode   Int
  responseTime String
  requestTime  String
  headers      String?
  request      String?
  response     String?
  createdAt    DateTime @default(now())
  user         Users?   @relation(fields: [userId], references: [id])
}
