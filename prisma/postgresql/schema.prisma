// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String           @id @default(uuid()) @db.Uuid()
  avatar         String?
  account        String?
  username       String?
  password       String?
  email          String?
  phone          String?
  role           String           @default("-")
  enabled        Boolean          @default(true)
  provider       String?
  sub            String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sessions       Sessions[]
  userBalances   UserBalances?
  UserModels     UserModels[]
  AuditLogs      RequestLogs[]
  Orders         Orders[]
  Chats          Chats[]
  Prompts        Prompts[]
  InvitationCode InvitationCode[]
}

model FileServices {
  id        String   @id @default(uuid()) @db.Uuid()
  name      String
  enabled   Boolean  @default(true)
  type      String
  configs   String   @default("{}") @db.VarChar(2048)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatModels {
  id            String     @id @default(uuid()) @db.Uuid()
  modelProvider String
  modelVersion  String
  name          String
  rank          Int?
  remarks       String?
  modelKeysId   String?    @db.Uuid()
  fileServiceId String?    @db.Uuid()
  fileConfig    String?    @default("{}") @db.VarChar(2048)
  modelConfig   String     @default("{}") @db.VarChar(2048)
  priceConfig   String     @default("{}") @db.VarChar(2048)
  enabled       Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  ModelKeys     ModelKeys? @relation(fields: [modelKeysId], references: [id])
  Chats         Chats[]
}

model Sessions {
  id        String   @id @default(uuid()) @db.Uuid()
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserModels {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @db.Uuid()
  models    String   @default("[]") @db.VarChar(4000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model Chats {
  id              String         @id @default(uuid()) @db.Uuid()
  title           String         @db.VarChar(50)
  userId          String         @db.Uuid()
  chatModelId     String?        @db.Uuid()
  userModelConfig String         @default("{}")
  isShared        Boolean        @default(false)
  isDeleted       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  user            Users          @relation(fields: [userId], references: [id])
  chatModel       ChatModels?    @relation(fields: [chatModelId], references: [id])
  ChatMessages    ChatMessages[]
}

model ChatMessages {
  id           String   @id @default(uuid()) @db.Uuid()
  userId       String   @db.Uuid()
  chatId       String   @db.Uuid()
  parentId     String?  @db.Uuid()
  chatModelId  String?  @db.Uuid()
  role         String
  messages     String   @db.Text()
  inputTokens  Int      @default(0)
  outputTokens Int      @default(0)
  inputPrice   Decimal  @default(0)
  outputPrice  Decimal  @default(0)
  duration     Int      @default(0)
  createdAt    DateTime @default(now())
  chats        Chats    @relation(fields: [chatId], references: [id])
}

model UserBalances {
  id        String   @id @default(uuid()) @db.Uuid()
  balance   Decimal  @default(0)
  userId    String   @unique @db.Uuid()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model BalanceLogs {
  id           String   @id @default(uuid()) @db.Uuid()
  userId       String   @db.Uuid()
  messageId    String?  @db.Uuid()
  createUserId String   @db.Uuid()
  value        Decimal  @default(0)
  type         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Orders {
  id           String   @id @default(uuid()) @db.Uuid()
  createUserId String   @db.Uuid()
  amount       Int
  outTradeNo   String
  status       String
  payH5Url     String?
  prepayId     String?  @db.Uuid()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         Users    @relation(fields: [createUserId], references: [id])
}

model Counterfoils {
  id        String   @id @default(uuid()) @db.Uuid()
  orderId   String   @db.Uuid()
  info      String   @db.Text()
  createdAt DateTime @default(now())
}

model LoginServices {
  id        String   @id @default(uuid()) @db.Uuid()
  type      String
  enabled   Boolean  @default(true)
  configs   String   @default("{}") @db.VarChar(2048)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sms {
  id        String   @id @default(uuid()) @db.Uuid()
  signName  String   @db.VarChar(50)
  type      Int      @db.SmallInt()
  status    Int      @db.SmallInt()
  code      String   @db.VarChar(10)
  createdAt DateTime @default(now())
}

model PayServices {
  id        String   @id @default(uuid()) @db.Uuid()
  type      String
  enabled   Boolean  @default(true)
  configs   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestLogs {
  id           String   @id @default(uuid()) @db.Uuid()
  ip           String?
  userId       String?  @db.Uuid()
  url          String
  method       String
  statusCode   Int
  responseTime String
  requestTime  String
  headers      String?  @db.Text()
  request      String?  @db.Text()
  response     String?  @db.Text()
  createdAt    DateTime @default(now())
  user         Users?   @relation(fields: [userId], references: [id])
}

model ModelKeys {
  id         String       @id @default(uuid()) @db.Uuid()
  name       String       @db.VarChar(100)
  type       String       @db.VarChar(50)
  configs    String       @db.VarChar(2028)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ChatModels ChatModels[]
}

model Prompts {
  id           String   @id @default(uuid()) @db.Uuid()
  name         String   @db.VarChar(100)
  type         Int      @db.SmallInt
  content      String?  @db.VarChar(2048)
  description  String?  @db.VarChar(100)
  createUserId String   @db.Uuid()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         Users?   @relation(fields: [createUserId], references: [id])
}

model UserInitialConfig {
  id               String          @id @default(uuid()) @db.Uuid
  name             String          @db.VarChar(50)
  loginType        String?         @db.VarChar(50)
  price            Decimal         @default(0)
  models           String          @default("[]") @db.VarChar(4000)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  InvitationCode   InvitationCode? @relation(fields: [invitationCodeId], references: [id])
  invitationCodeId String?         @db.Uuid
}

model Configs {
  key         String  @unique
  value       String  @db.VarChar(1000)
  description String? @db.VarChar(50)
}

model InvitationCode {
  id                String              @id @default(uuid()) @db.Uuid
  value             String              @unique
  count             Int                 @db.SmallInt
  createUserId      String              @db.Uuid
  createdAt         DateTime            @default(now())
  isDeleted         Boolean             @default(false)
  user              Users?              @relation(fields: [createUserId], references: [id])
  UserInvitation    UserInvitation[]
  UserInitialConfig UserInitialConfig[]
}

model UserInvitation {
  id               String         @id @default(uuid()) @db.Uuid
  userId           String         @db.Uuid
  invitationCodeId String         @db.Uuid
  InvitationCode   InvitationCode @relation(fields: [invitationCodeId], references: [id])
}
