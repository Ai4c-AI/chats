name: Build Container
on:
  push:
    branches:
      - main
    paths:
      - 'src/BE/**'
      - 'src/FE/**'
      - '.github/workflows/build-container.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-fe:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('src/FE/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies
        working-directory: ./src/FE
        run: npm ci

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: src/FE/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.svg', '**/*.png', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-next-cache-

      - name: Build frontend
        working-directory: ./src/FE
        run: npm run build

      - name: Upload FE build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chats-fe-r${{ github.run_number }}
          path: ./src/FE/out

  build-container:
    needs: build-fe
    runs-on: ubuntu-latest
    steps:
      - name: Login container
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USERNAME }} ${{ vars.DOCKER_REGISTRY }} --password-stdin

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download FE build artifacts
        uses: actions/download-artifact@v4
        with:
          name: chats-fe-r${{ github.run_number }}
          path: ./src/BE/wwwroot

      - name: Build container
        run: |
          dotnet publish ./src/BE/Chats.BE.csproj -c Release --os linux --arch x64 /t:PublishContainer /p:ContainerRepository=chats

      - name: Tag container with 'latest' & run number
        run: |
          docker tag chats ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}
          docker tag chats ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:latest
          
      - name: Push container
        run: |
          docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}
          docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:latest

  build-binaries:
    needs: build-fe
    strategy:
      matrix:
        include:
          - runtime: win-x64
          - runtime: linux-x64
          - runtime: linux-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download FE build artifacts
        uses: actions/download-artifact@v4
        with:
          name: chats-fe-r${{ github.run_number }}
          path: ./src/BE/wwwroot

      - name: build binary
        run: |
          dotnet publish ./src/BE/Chats.BE.csproj -c Release -r ${{ matrix.runtime }} --self-contained true -o ./Publish /p:DeleteExistingFiles=True /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:EnableCompressionInSingleFile=true

      - name: Archive binary
        run: |
          7z a -tzip -mx=1 chats-win-x64-r${{ github.run_number }}.zip ./Publish/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chats-${{ matrix.runtime }}-r${{ github.run_number }}
          path: ./Publish

  create-release:
    needs: [build-container, build-binaries]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: r-${{ github.run_number }}
          release_name: r-${{ github.run_number }}
          draft: false
          prerelease: false
          body: |
            docker download: `docker pull ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}`

  upload-release-binaries:
    strategy:
      matrix:
        include:
          - runtime: win-x64
          - runtime: linux-x64
          - runtime: linux-arm64
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: chats-${{ matrix.runtime }}-r${{ github.run_number }}
          path: chats-${{ matrix.runtime }}-r${{ github.run_number }}
  
      - name: Compress artifacts into ZIP
        run: |
          zip -r chats-${{ matrix.runtime }}-r${{ github.run_number }}.zip chats-${{ matrix.runtime }}-r${{ github.run_number }}
        shell: bash
  
      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: chats-${{ matrix.runtime }}-r${{ github.run_number }}.zip
          asset_name: chats-${{ matrix.runtime }}-r${{ github.run_number }}.zip
          asset_content_type: application/zip

  deploy-dev-stg:
    runs-on: ubuntu-latest
    needs: build-container
    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: deploy dev/stg
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 zhoujie@home.starworks.cc << 'EOF'
            docker pull ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}
            cd chats
            sed -i "s/^TAG=.*/TAG=r-${{ github.run_number }}/" ~/chats/dev.env
            sed -i "s/^TAG=.*/TAG=r-${{ github.run_number }}/" ~/chats/stg.env
            ./dev.sh && ./stg.sh
            