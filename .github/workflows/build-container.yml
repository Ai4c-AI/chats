name: Build Container
on:
  push:
    branches:
      - main
    paths:
      - 'src/BE/**'
      - 'src/FE/**'
      - '.github/workflows/build-container.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-fe:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('src/FE/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies
        working-directory: ./src/FE
        run: npm ci

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: src/FE/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.svg', '**/*.png', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-next-cache-

      - name: Build frontend
        working-directory: ./src/FE
        run: npm run build

      - name: Upload FE build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fe-build
          path: ./src/FE/out

  build-container:
    needs: build-fe
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: linux
          - os: windows-latest
            os_name: win
    runs-on: ${{ matrix.os }}
    steps:
      - name: Login container
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USERNAME }} ${{ vars.DOCKER_REGISTRY }} --password-stdin

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download FE build artifacts
        uses: actions/download-artifact@v4
        with:
          name: fe-build
          path: ./src/FE/out

      - name: Move build files
        run: mv ./src/FE/out/* ./src/BE/wwwroot

      - name: Build container
        run: |
          dotnet publish ./src/BE/Chats.BE.csproj -c Release --os ${{ matrix.os_name }} --arch x64 /t:PublishContainer /p:ContainerRepository=chats

      - name: Tag container with 'latest' & run number
        run: |
          docker tag chats ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}
          docker tag chats ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:latest

      - name: Push container
        run: |
          docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}
          docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:latest

      # Deploy step, only for Linux runner
      - name: Start SSH Agent
        if: runner.os == 'Linux'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy dev/stg
        if: runner.os == 'Linux'
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 zhoujie@home.starworks.cc << 'EOF'
            docker pull ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:r-${{ github.run_number }}
            cd chats
            sed -i "s/^TAG=.*/TAG=r-${{ github.run_number }}/" ~/chats/dev.env
            sed -i "s/^TAG=.*/TAG=r-${{ github.run_number }}/" ~/chats/stg.env
            ./dev.sh && ./stg.sh
          EOF

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: r-${{ github.run_number }}
      #     release_name: r-${{ github.run_number }}
      #     draft: false
      #     prerelease: false

      # - name: build win-x64 binary
      #   run: |
      #     rm -rf ./Publish
      #     dotnet publish ./src/BE/Chats.BE.csproj -c Release -r win-x64 --self-contained true -o ./Publish /p:DeleteExistingFiles=True /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:EnableCompressionInSingleFile=true
      #     7z a -tzip -mx=1 chats-win-x64-r${{ github.run_number }}.zip ./Publish/*

      # - name: Upload win-x64 Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: chats-win-x64-r${{ github.run_number }}.zip
      #     asset_name: chats-win-x64-r${{ github.run_number }}.zip
      #     asset_content_type: application/octet-stream

      # - name: build linux-x64 binary
      #   run: |
      #     rm -rf ./Publish
      #     dotnet publish ./src/BE/Chats.BE.csproj -c Release -r linux-x64 --self-contained true -o ./Publish /p:DeleteExistingFiles=True /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:EnableCompressionInSingleFile=true
      #     7z a -tzip -mx=1 chats-linux-x64-r${{ github.run_number }}.zip ./Publish/*

      # - name: Upload linux-x64 Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: chats-linux-x64-r${{ github.run_number }}.zip
      #     asset_name: chats-linux-x64-r${{ github.run_number }}.zip
      #     asset_content_type: application/octet-stream

      # - name: build linux-arm64 binary
      #   run: |
      #     rm -rf ./Publish
      #     dotnet publish ./src/BE/Chats.BE.csproj -c Release -r linux-arm64 --self-contained true -o ./Publish /p:DeleteExistingFiles=True /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:EnableCompressionInSingleFile=true
      #     7z a -tzip -mx=1 chats-linux-arm64-r${{ github.run_number }}.zip ./Publish/*

      # - name: Upload linux-arm64 Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: chats-linux-arm64-r${{ github.run_number }}.zip
      #     asset_name: chats-linux-arm64-r${{ github.run_number }}.zip
      #     asset_content_type: application/octet-stream